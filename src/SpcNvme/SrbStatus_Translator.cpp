#include "pch.h"

UCHAR NvmeGenericToSrbStatus(NVME_COMMAND_STATUS &status)
{

        //NVME_STATUS_INVALID_COMMAND_OPCODE = 0x01,
        //NVME_STATUS_INVALID_FIELD_IN_COMMAND = 0x02,
        //NVME_STATUS_COMMAND_ID_CONFLICT = 0x03,
        //NVME_STATUS_DATA_TRANSFER_ERROR = 0x04,
        //NVME_STATUS_COMMAND_ABORTED_DUE_TO_POWER_LOSS_NOTIFICATION = 0x05,
        //NVME_STATUS_INTERNAL_DEVICE_ERROR = 0x06,
        //NVME_STATUS_COMMAND_ABORT_REQUESTED = 0x07,
        //NVME_STATUS_COMMAND_ABORTED_DUE_TO_SQ_DELETION = 0x08,
        //NVME_STATUS_COMMAND_ABORTED_DUE_TO_FAILED_FUSED_COMMAND = 0x09,
        //NVME_STATUS_COMMAND_ABORTED_DUE_TO_FAILED_MISSING_COMMAND = 0x0A,
        //NVME_STATUS_INVALID_NAMESPACE_OR_FORMAT = 0x0B,
        //NVME_STATUS_COMMAND_SEQUENCE_ERROR = 0x0C,
        //NVME_STATUS_INVALID_SGL_LAST_SEGMENT_DESCR = 0x0D,
        //NVME_STATUS_INVALID_NUMBER_OF_SGL_DESCR = 0x0E,
        //NVME_STATUS_DATA_SGL_LENGTH_INVALID = 0x0F,
        //NVME_STATUS_METADATA_SGL_LENGTH_INVALID = 0x10,
        //NVME_STATUS_SGL_DESCR_TYPE_INVALID = 0x11,
        //NVME_STATUS_INVALID_USE_OF_CONTROLLER_MEMORY_BUFFER = 0x12,
        //NVME_STATUS_PRP_OFFSET_INVALID = 0x13,
        //NVME_STATUS_ATOMIC_WRITE_UNIT_EXCEEDED = 0x14,
        //NVME_STATUS_OPERATION_DENIED = 0x15,
        //NVME_STATUS_SGL_OFFSET_INVALID = 0x16,
        //NVME_STATUS_RESERVED = 0x17,
        //NVME_STATUS_HOST_IDENTIFIER_INCONSISTENT_FORMAT = 0x18,
        //NVME_STATUS_KEEP_ALIVE_TIMEOUT_EXPIRED = 0x19,
        //NVME_STATUS_KEEP_ALIVE_TIMEOUT_INVALID = 0x1A,
        //NVME_STATUS_COMMAND_ABORTED_DUE_TO_PREEMPT_ABORT = 0x1B,
        //NVME_STATUS_SANITIZE_FAILED = 0x1C,
        //NVME_STATUS_SANITIZE_IN_PROGRESS = 0x1D,
        //NVME_STATUS_SGL_DATA_BLOCK_GRANULARITY_INVALID = 0x1E,

        //NVME_STATUS_DIRECTIVE_TYPE_INVALID = 0x70,
        //NVME_STATUS_DIRECTIVE_ID_INVALID = 0x71,

        //NVME_STATUS_NVM_LBA_OUT_OF_RANGE = 0x80,
        //NVME_STATUS_NVM_CAPACITY_EXCEEDED = 0x81,
        //NVME_STATUS_NVM_NAMESPACE_NOT_READY = 0x82,
        //NVME_STATUS_NVM_RESERVATION_CONFLICT = 0x83,
        //NVME_STATUS_FORMAT_IN_PROGRESS = 0x84,
    UNREFERENCED_PARAMETER(status);
    return SRB_STATUS_INVALID_REQUEST;
}
UCHAR NvmeCmdSpecificToSrbStatus(NVME_COMMAND_STATUS &status)
{
    UNREFERENCED_PARAMETER(status);
    return SRB_STATUS_INVALID_REQUEST;
}
UCHAR NvmeMediaErrorToSrbStatus(NVME_COMMAND_STATUS &status)
{
    UNREFERENCED_PARAMETER(status);
    return SRB_STATUS_INVALID_REQUEST;
}


#if 0

//
//  Status Code (SC) of NVME_STATUS_TYPE_GENERIC_COMMAND
//
typedef enum {

    NVME_STATUS_SUCCESS_COMPLETION = 0x00,
    NVME_STATUS_INVALID_COMMAND_OPCODE = 0x01,
    NVME_STATUS_INVALID_FIELD_IN_COMMAND = 0x02,
    NVME_STATUS_COMMAND_ID_CONFLICT = 0x03,
    NVME_STATUS_DATA_TRANSFER_ERROR = 0x04,
    NVME_STATUS_COMMAND_ABORTED_DUE_TO_POWER_LOSS_NOTIFICATION = 0x05,
    NVME_STATUS_INTERNAL_DEVICE_ERROR = 0x06,
    NVME_STATUS_COMMAND_ABORT_REQUESTED = 0x07,
    NVME_STATUS_COMMAND_ABORTED_DUE_TO_SQ_DELETION = 0x08,
    NVME_STATUS_COMMAND_ABORTED_DUE_TO_FAILED_FUSED_COMMAND = 0x09,
    NVME_STATUS_COMMAND_ABORTED_DUE_TO_FAILED_MISSING_COMMAND = 0x0A,
    NVME_STATUS_INVALID_NAMESPACE_OR_FORMAT = 0x0B,
    NVME_STATUS_COMMAND_SEQUENCE_ERROR = 0x0C,
    NVME_STATUS_INVALID_SGL_LAST_SEGMENT_DESCR = 0x0D,
    NVME_STATUS_INVALID_NUMBER_OF_SGL_DESCR = 0x0E,
    NVME_STATUS_DATA_SGL_LENGTH_INVALID = 0x0F,
    NVME_STATUS_METADATA_SGL_LENGTH_INVALID = 0x10,
    NVME_STATUS_SGL_DESCR_TYPE_INVALID = 0x11,
    NVME_STATUS_INVALID_USE_OF_CONTROLLER_MEMORY_BUFFER = 0x12,
    NVME_STATUS_PRP_OFFSET_INVALID = 0x13,
    NVME_STATUS_ATOMIC_WRITE_UNIT_EXCEEDED = 0x14,
    NVME_STATUS_OPERATION_DENIED = 0x15,
    NVME_STATUS_SGL_OFFSET_INVALID = 0x16,
    NVME_STATUS_RESERVED = 0x17,
    NVME_STATUS_HOST_IDENTIFIER_INCONSISTENT_FORMAT = 0x18,
    NVME_STATUS_KEEP_ALIVE_TIMEOUT_EXPIRED = 0x19,
    NVME_STATUS_KEEP_ALIVE_TIMEOUT_INVALID = 0x1A,
    NVME_STATUS_COMMAND_ABORTED_DUE_TO_PREEMPT_ABORT = 0x1B,
    NVME_STATUS_SANITIZE_FAILED = 0x1C,
    NVME_STATUS_SANITIZE_IN_PROGRESS = 0x1D,
    NVME_STATUS_SGL_DATA_BLOCK_GRANULARITY_INVALID = 0x1E,

    NVME_STATUS_DIRECTIVE_TYPE_INVALID = 0x70,
    NVME_STATUS_DIRECTIVE_ID_INVALID = 0x71,

    NVME_STATUS_NVM_LBA_OUT_OF_RANGE = 0x80,
    NVME_STATUS_NVM_CAPACITY_EXCEEDED = 0x81,
    NVME_STATUS_NVM_NAMESPACE_NOT_READY = 0x82,
    NVME_STATUS_NVM_RESERVATION_CONFLICT = 0x83,
    NVME_STATUS_FORMAT_IN_PROGRESS = 0x84,

} NVME_STATUS_GENERIC_COMMAND_CODES;

//
//  Status Code (SC) of NVME_STATUS_TYPE_COMMAND_SPECIFIC
//
typedef enum {

    NVME_STATUS_COMPLETION_QUEUE_INVALID = 0x00,         // Create I/O Submission Queue
    NVME_STATUS_INVALID_QUEUE_IDENTIFIER = 0x01,         // Create I/O Submission Queue, Create I/O Completion Queue, Delete I/O Completion Queue, Delete I/O Submission Queue
    NVME_STATUS_MAX_QUEUE_SIZE_EXCEEDED = 0x02,         // Create I/O Submission Queue, Create I/O Completion Queue
    NVME_STATUS_ABORT_COMMAND_LIMIT_EXCEEDED = 0x03,         // Abort
    NVME_STATUS_ASYNC_EVENT_REQUEST_LIMIT_EXCEEDED = 0x05,         // Asynchronous Event Request
    NVME_STATUS_INVALID_FIRMWARE_SLOT = 0x06,         // Firmware Commit
    NVME_STATUS_INVALID_FIRMWARE_IMAGE = 0x07,         // Firmware Commit
    NVME_STATUS_INVALID_INTERRUPT_VECTOR = 0x08,         // Create I/O Completion Queue
    NVME_STATUS_INVALID_LOG_PAGE = 0x09,         // Get Log Page
    NVME_STATUS_INVALID_FORMAT = 0x0A,         // Format NVM
    NVME_STATUS_FIRMWARE_ACTIVATION_REQUIRES_CONVENTIONAL_RESET = 0x0B,         // Firmware Commit
    NVME_STATUS_INVALID_QUEUE_DELETION = 0x0C,         // Delete I/O Completion Queue
    NVME_STATUS_FEATURE_ID_NOT_SAVEABLE = 0x0D,         // Set Features
    NVME_STATUS_FEATURE_NOT_CHANGEABLE = 0x0E,         // Set Features
    NVME_STATUS_FEATURE_NOT_NAMESPACE_SPECIFIC = 0x0F,         // Set Features
    NVME_STATUS_FIRMWARE_ACTIVATION_REQUIRES_NVM_SUBSYSTEM_RESET = 0x10,         // Firmware Commit
    NVME_STATUS_FIRMWARE_ACTIVATION_REQUIRES_RESET = 0x11,         // Firmware Commit
    NVME_STATUS_FIRMWARE_ACTIVATION_REQUIRES_MAX_TIME_VIOLATION = 0x12,         // Firmware Commit
    NVME_STATUS_FIRMWARE_ACTIVATION_PROHIBITED = 0x13,         // Firmware Commit
    NVME_STATUS_OVERLAPPING_RANGE = 0x14,         // Firmware Commit, Firmware Image Download, Set Features

    NVME_STATUS_NAMESPACE_INSUFFICIENT_CAPACITY = 0x15,         // Namespace Management
    NVME_STATUS_NAMESPACE_IDENTIFIER_UNAVAILABLE = 0x16,         // Namespace Management
    NVME_STATUS_NAMESPACE_ALREADY_ATTACHED = 0x18,         // Namespace Attachment
    NVME_STATUS_NAMESPACE_IS_PRIVATE = 0x19,         // Namespace Attachment
    NVME_STATUS_NAMESPACE_NOT_ATTACHED = 0x1A,         // Namespace Attachment
    NVME_STATUS_NAMESPACE_THIN_PROVISIONING_NOT_SUPPORTED = 0x1B,         // Namespace Management
    NVME_STATUS_CONTROLLER_LIST_INVALID = 0x1C,         // Namespace Attachment

    NVME_STATUS_DEVICE_SELF_TEST_IN_PROGRESS = 0x1D,         // Device Self-test

    NVME_STATUS_BOOT_PARTITION_WRITE_PROHIBITED = 0x1E,         // Firmware Commit

    NVME_STATUS_INVALID_CONTROLLER_IDENTIFIER = 0x1F,         // Virtualization Management
    NVME_STATUS_INVALID_SECONDARY_CONTROLLER_STATE = 0x20,         // Virtualization Management
    NVME_STATUS_INVALID_NUMBER_OF_CONTROLLER_RESOURCES = 0x21,         // Virtualization Management
    NVME_STATUS_INVALID_RESOURCE_IDENTIFIER = 0x22,         // Virtualization Management

    NVME_STATUS_SANITIZE_PROHIBITED_ON_PERSISTENT_MEMORY = 0x23,         // Sanitize

    NVME_STATUS_INVALID_ANA_GROUP_IDENTIFIER = 0x24,         // Namespace Management
    NVME_STATUS_ANA_ATTACH_FAILED = 0x25,         // Namespace Attachment

    NVME_IO_COMMAND_SET_NOT_SUPPORTED = 0x29,         // Namespace Attachment/Management
    NVME_IO_COMMAND_SET_NOT_ENABLED = 0x2A,         // Namespace Attachment
    NVME_IO_COMMAND_SET_COMBINATION_REJECTED = 0x2B,         // Set Features
    NVME_IO_COMMAND_SET_INVALID = 0x2C,         // Identify

    NVME_STATUS_STREAM_RESOURCE_ALLOCATION_FAILED = 0x7F,         // Streams Directive
    NVME_STATUS_ZONE_INVALID_FORMAT = 0x7F,         // Namespace Management

    NVME_STATUS_NVM_CONFLICTING_ATTRIBUTES = 0x80,         // Dataset Management, Read, Write
    NVME_STATUS_NVM_INVALID_PROTECTION_INFORMATION = 0x81,         // Compare, Read, Write, Write Zeroes
    NVME_STATUS_NVM_ATTEMPTED_WRITE_TO_READ_ONLY_RANGE = 0x82,         // Dataset Management, Write, Write Uncorrectable, Write Zeroes
    NVME_STATUS_NVM_COMMAND_SIZE_LIMIT_EXCEEDED = 0x83,         // Dataset Management

    NVME_STATUS_ZONE_BOUNDARY_ERROR = 0xB8,         // Compare, Read, Verify, Write, Write Uncorrectable, Write Zeroes, Copy, Zone Append
    NVME_STATUS_ZONE_FULL = 0xB9,         // Write, Write Uncorrectable, Write Zeroes, Copy, Zone Append
    NVME_STATUS_ZONE_READ_ONLY = 0xBA,         // Write, Write Uncorrectable, Write Zeroes, Copy, Zone Append
    NVME_STATUS_ZONE_OFFLINE = 0xBB,         // Compare, Read, Verify, Write, Write Uncorrectable, Write Zeroes, Copy, Zone Append
    NVME_STATUS_ZONE_INVALID_WRITE = 0xBC,         // Write, Write Uncorrectable, Write Zeroes, Copy
    NVME_STATUS_ZONE_TOO_MANY_ACTIVE = 0xBD,         // Write, Write Uncorrectable, Write Zeroes, Copy, Zone Append, Zone Management Send
    NVME_STATUS_ZONE_TOO_MANY_OPEN = 0xBE,         // Write, Write Uncorrectable, Write Zeroes, Copy, Zone Append, Zone Management Send
    NVME_STATUS_ZONE_INVALID_STATE_TRANSITION = 0xBF,         // Zone Management Send

} NVME_STATUS_COMMAND_SPECIFIC_CODES;

//
//  Status Code (SC) of NVME_STATUS_TYPE_MEDIA_ERROR
//
typedef enum {

    NVME_STATUS_NVM_WRITE_FAULT = 0x80,
    NVME_STATUS_NVM_UNRECOVERED_READ_ERROR = 0x81,
    NVME_STATUS_NVM_END_TO_END_GUARD_CHECK_ERROR = 0x82,
    NVME_STATUS_NVM_END_TO_END_APPLICATION_TAG_CHECK_ERROR = 0x83,
    NVME_STATUS_NVM_END_TO_END_REFERENCE_TAG_CHECK_ERROR = 0x84,
    NVME_STATUS_NVM_COMPARE_FAILURE = 0x85,
    NVME_STATUS_NVM_ACCESS_DENIED = 0x86,
    NVME_STATUS_NVM_DEALLOCATED_OR_UNWRITTEN_LOGICAL_BLOCK = 0x87,

} NVME_STATUS_MEDIA_ERROR_CODES;

#endif

